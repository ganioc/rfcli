"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rfc_client_1 = require("../client/client/rfc_client");
const colors = require("colors");
const core_1 = require("../core");
const common_1 = require("../lib/common");
let SYSINFO = {};
SYSINFO.secret = "6d23e5ab295b296079c9885056e71981042dc829517343c5c4af19ebac9436a1";
SYSINFO.host = "40.73.1.241";
SYSINFO.port = 18089;
SYSINFO.address = "1jPTj1YjuaWtYviYaNhTRYewyVttvz5wA";
SYSINFO.verbose = true;
let clientHttp;
clientHttp = new rfc_client_1.RPCClient(SYSINFO.host, SYSINFO.port, SYSINFO);
let ctx = {
    client: clientHttp,
    sysinfo: SYSINFO
};
async function main() {
    let tx = new core_1.ValueTransaction();
    tx.method = 'transferTo';
    tx.value = new core_1.BigNumber(1);
    tx.fee = new core_1.BigNumber(0.1);
    tx.input = { to: "17xT51Hw6oXBVKbYmmJt7t4TJRX8RSant3" };
    // get nonce
    let { err, nonce } = await ctx.client.getNonce({ address: ctx.sysinfo.address });
    console.log(colors.yellow('------------------ get nonce ------------'));
    if (err) {
        console.log(colors.red('get nonce failed'));
        return;
    }
    else {
        console.log('nonce: ', nonce);
    }
    tx.nonce = nonce + 1;
    // tx sign
    tx.sign(ctx.sysinfo.secret);
    console.log(colors.yellow('------------------ sign tx ------------'));
    console.log('');
    console.log(tx);
    // send out 
    let sendRet = await ctx.client.sendTransaction({ tx });
    if (sendRet.err) {
        console.log(colors.red('Sign failed'));
        return;
    }
    // check if succeed
    console.log(colors.yellow('------------------ check receipt ------------'));
    let receiptResult = await common_1.checkReceipt(ctx, tx.hash);
    console.log(receiptResult);
    console.log('');
    if (receiptResult.ret !== 0) {
        console.log(colors.red('tx not processed'));
        return;
    }
    else {
        console.log(colors.blue('tx processed'));
    }
}
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVtb190cmFuc2Zlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZW1vL2RlbW9fdHJhbnNmZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw0REFBd0Q7QUFDeEQsaUNBQWlDO0FBQ2pDLGtDQUFzRDtBQUN0RCwwQ0FBNkM7QUFFN0MsSUFBSSxPQUFPLEdBQVEsRUFBRSxDQUFDO0FBQ3RCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsa0VBQWtFLENBQUM7QUFDcEYsT0FBTyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7QUFDN0IsT0FBTyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7QUFDckIsT0FBTyxDQUFDLE9BQU8sR0FBRyxtQ0FBbUMsQ0FBQztBQUN0RCxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUV2QixJQUFJLFVBQXFCLENBQUM7QUFFMUIsVUFBVSxHQUFHLElBQUksc0JBQVMsQ0FDdEIsT0FBTyxDQUFDLElBQUksRUFDWixPQUFPLENBQUMsSUFBSSxFQUNaLE9BQU8sQ0FDVixDQUFDO0FBRUYsSUFBSSxHQUFHLEdBQUc7SUFDTixNQUFNLEVBQUUsVUFBVTtJQUNsQixPQUFPLEVBQUUsT0FBTztDQUNuQixDQUFBO0FBR0QsS0FBSztJQUVELElBQUksRUFBRSxHQUFHLElBQUksdUJBQWdCLEVBQUUsQ0FBQztJQUNoQyxFQUFFLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztJQUN6QixFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksZ0JBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksZ0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixFQUFFLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxFQUFFLG9DQUFvQyxFQUFFLENBQUM7SUFFeEQsWUFBWTtJQUNaLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFakYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLDJDQUEyQyxDQUFDLENBQUMsQ0FBQTtJQUN2RSxJQUFJLEdBQUcsRUFBRTtRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTztLQUNWO1NBQU07UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQTtLQUNoQztJQUVELEVBQUUsQ0FBQyxLQUFLLEdBQUcsS0FBTSxHQUFHLENBQUMsQ0FBQztJQUV0QixVQUFVO0lBQ1YsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUE7SUFDckUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFZixZQUFZO0lBQ1osSUFBSSxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkQsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO1FBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUE7UUFDdEMsT0FBTztLQUNWO0lBRUQsbUJBQW1CO0lBRW5CLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDLENBQUE7SUFDM0UsSUFBSSxhQUFhLEdBQUcsTUFBTSxxQkFBWSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUUxQixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxhQUFhLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRTtRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE9BQU87S0FDVjtTQUFNO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUE7S0FDM0M7QUFFTCxDQUFDO0FBRUQsSUFBSSxFQUFFLENBQUMifQ==